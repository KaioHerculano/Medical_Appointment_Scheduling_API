name: CI/CD Pipeline

on:
  push:
    branches: [dev, main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: v1-poetry-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            v1-poetry-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      # --- LINTING ---
      - name: Run flake8
        run: poetry run flake8 app/ authentication/ consultations/ doctors/

      - name: Run black
        run: poetry run black --check .

      - name: Run isort
        run: poetry run isort --check-only .
        
      # --- TESTING ---
      - name: Run tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DEBUG: ${{ github.ref == 'refs/heads/dev' }}
          ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB_TEST }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER_TEST }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD_TEST }}
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
        run: poetry run python manage.py test
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB_TEST }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER_TEST }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD_TEST }}
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd Medical_Appointment_Scheduling_API
            git pull origin ${{ github.ref_name }}
            
            if [ "${{ github.ref_name }}" = "main" ]; then
              DOCKER_COMPOSE_FILE="docker-compose.prod.yml"
            else
              DOCKER_COMPOSE_FILE="docker-compose.yml"
            fi
            
            docker-compose -f $DOCKER_COMPOSE_FILE up --build -d --remove-orphans