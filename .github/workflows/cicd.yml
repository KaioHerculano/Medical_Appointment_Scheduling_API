name: CI/CD - API de Agendamento Médico

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: 🧹 Lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Poetry
        run: |
          pip install poetry
      - name: Install dependencies
        run: |
          poetry install
          poetry run pip install flake8
      - name: Run flake8
        run: poetry run flake8 .

  test:
    name: 🧪 Testes Automatizados
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install Poetry
        run: pip install poetry
      - name: Install dependencies
        run: |
          poetry install
      - name: Rodar testes
        run: |
          poetry run pytest

  build:
    name: 🐳 Build da Imagem Docker
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Build da imagem Docker
        run: docker build -t api-agendamento .

  deploy:
    name: 🚀 Deploy (manual ou futuro automático)
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Simulação de Deploy
        run: echo "Aqui você pode configurar o deploy para EC2, Render, Railway, etc"
