name: CI/CD Pipeline

on:
  push:
    branches: [dev, main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install

      - name: Run flake8
        run: poetry run flake8 .

      - name: Run black
        run: poetry run black --check .

      - name: Run isort
        run: poetry run isort --check-only .

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        ports: ['5432:5432']
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DEBUG: ${{ github.ref == 'refs/heads/dev' && 'True' || 'False' }}
      ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      DATABASE_URL: postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        run: poetry install

      - name: Run tests (without migrate, assuming docker-compose handles it)
        run: poetry run python manage.py test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'

    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_KEY: ${{ secrets.SSH_KEY }}

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to server
        run: |
          echo "$SSH_KEY" > key.pem
          chmod 600 key.pem

          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            DOCKER_COMPOSE_FILE="docker-compose.prod.yml"
          else
            DOCKER_COMPOSE_FILE="docker-compose.dev.yml"
          fi

          ssh -i "medical_appointment_dev_key.pem" ubuntu@ec2-54-91-138-117.compute-1.amazonaws.com "
            cd Medical_Appointment_Scheduling_API &&
            git pull origin ${{ github.ref#refs/heads/ }} &&
            docker-compose -f \$DOCKER_COMPOSE_FILE up --build -d
          "
